{"version":3,"sources":["logo.svg","config/config.js","services/OmdbApiService.js","services/MovieTypes.js","components/Search/Search.js","components/MovieDetail/MovieDetail.js","components/MoviePreview/MoviePreview.js","components/UpcomingMovies/UpcomingMovies.js","components/SearchResult/SearchResult.js","components/KinoAppBar/KinoAppBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppConfig","omdbApiService","searchString","movieType","year","request","axios","get","id","movieName","y","movieTypes","Search","props","types","forEach","t","state","Object","assign","resultList","toSearchResult","toMovieDetail","className","this","redirectToSearchResult","map","key","type","value","checked","onChange","onMovieTypeCheckChanged","bind","htmlFor","placeholder","onKeyPress","handleChange","onClick","e","setState","event","target","values","preventDefault","searchByType","movie","then","res","data","Response","catch","console","log","history","push","filter","join","React","Component","MovieDetail","componentDidMount","searchById","match","params","resp","Title","src","Poster","Released","Actors","Plot","MoviePreview","redirectToDetail","m","imdbID","to","Genre","Ratings","r","Source","Value","UpcomingMovies","movies","moviePromises","split","searchByName","Date","getFullYear","Promise","all","responses","result","Map","has","set","header","length","SearchResult","genres","allMovies","filteredMovies","selectedGenre","orderMoviesBy","componentDidUpdate","doSearch","applyFilter","lastSearchValue","movietypes","movieIDs","s","flat","response","Set","unshift","processedMovies","indexOf","releasedDate","sort","a","b","imdbRating","aScore","bScore","parseFloat","title","g","default","KinoAppBar","AppBar","position","require","createBrowserHistory","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,oRCA9BC,EAAwB,qBAAxBA,EAAwD,W,iBCqBtDC,EADQ,I,qGAhBNC,EAAcC,EAAWC,GAClC,IAAIC,EAAO,UAAML,EAAN,oBAAkCA,EAAlC,cAAwDE,EAAxD,iBAA6EC,EAA7E,cAA4FC,EAA5F,kBACX,OAAOE,IAAMC,IAAIF,K,iCAGVG,GACP,IAAIH,EAAO,UAAML,EAAN,oBAAkCA,EAAlC,cAAwDQ,EAAxD,cACX,OAAOF,IAAMC,IAAIF,K,mCAGRI,EAAWC,GACpB,IAAIL,EAAO,UAAML,EAAN,oBAAkCA,EAAlC,cAAwDS,EAAxD,cAAuEC,GAClF,OAAOJ,IAAMC,IAAIF,O,MCdVM,EAFI,CAAC,QAAS,SAAU,WCK1BC,G,MAAb,YACI,WAAYC,GAAQ,IAAD,sBACf,4CAAMA,IAEN,IAAIC,EAAQ,GAHG,OAIfH,EAAWI,SAAQ,SAAAC,GAAC,OAAIF,EAAME,IAAK,KACnC,EAAKC,MAAQC,OAAOC,OAAOL,EAAO,CAAEM,WAAY,GAAIX,UAAW,GAAIY,gBAAgB,EAAOC,eAAe,IAL1F,EADvB,sEASc,IAAD,OACL,OACI,yBAAKC,UAAU,qCACVC,KAAKC,yBACN,0BAAMF,UAAU,eACZ,yBAAKA,UAAU,eACVZ,EAAWe,KAAI,SAAAV,GAAC,OACb,yBAAKO,UAAU,+BAA+BI,IAAKX,GAC/C,2BAAOO,UAAU,mBAAmBK,KAAK,WAAWC,MAAOb,EAAGc,QAAS,EAAKb,MAAMD,GAAIe,SAAU,EAAKC,wBAAwBC,KAAK,GAAOzB,GAAIQ,IAC7I,2BAAOO,UAAU,mBAAmBW,QAASlB,GAAIA,QAI7D,yBAAKO,UAAU,eACX,2BAAOA,UAAU,eAAeY,YAAY,aAAaP,KAAK,OAAOQ,WAAYZ,KAAKY,WAAWH,KAAKT,MAAOK,MAAOL,KAAKP,MAAMR,UAAWsB,SAAUP,KAAKa,aAAaJ,KAAKT,QAC3K,yBAAKD,UAAU,sBACX,4BAAQA,UAAU,4BAA4BK,KAAK,SAASU,QAAS,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEnB,gBAAgB,MAA1G,gBAzB5B,8CAiC4BoB,GACpBjB,KAAKP,MAAMwB,EAAMC,OAAOb,OAASY,EAAMC,OAAOZ,QAC9CN,KAAKgB,SAAShB,KAAKP,SAnC3B,mCAsCiBwB,GACLjB,KAAKP,MAAMI,gBACXG,KAAKgB,SAAS,CAAEnB,gBAAgB,IAEpCG,KAAKgB,SAAS,CAAE/B,UAAWgC,EAAMC,OAAOb,UA1ChD,0CA6CwBY,EAAOE,GAAS,IAAD,OAC/BF,EAAMG,iBAEN3C,EAAe4C,aAAaJ,EAAMC,OAAOb,MAAOlB,EAAWmC,OACtDC,MAAK,SAAAC,GACF,EAAKR,SAAS,CAAEpB,WAAiC,SAArB4B,EAAIC,KAAKC,SAAsB,GAAKF,EAAIC,KAAKrC,YAE5EuC,OAAM,SAAAZ,GACHa,QAAQC,IAAId,QArD5B,iCAyDeE,GACU,SAAbA,EAAMd,KACNH,KAAKgB,SAAS,CAAEnB,gBAAgB,MA3D5C,+CA+D8B,IAAD,OACjBG,KAAKP,MAAMI,gBACXG,KAAKX,MAAMyC,QAAQC,KAAnB,yBAA0C/B,KAAKP,MAAMR,UAArD,YAAkEE,EAAW6C,QAAO,SAAAxC,GAAC,OAAI,EAAKC,MAAMD,MAAIyC,KAAK,WAjEzH,GAA4BC,IAAMC,Y,QCFrBC,EAAb,YACI,WAAY/C,GAAQ,IAAD,8BACf,4CAAMA,KACDI,MAAQ,CACT6B,MAAO,MAEX,EAAKe,kBAAoB,EAAKA,kBAAkB5B,KAAvB,gBALV,EADvB,iFASyB,IAAD,OAChBhC,EAAe6D,WAAWtC,KAAKX,MAAMkD,MAAMC,OAAOxD,IAC7CuC,MAAK,SAAAkB,GACF,EAAKzB,SAAS,CAAEM,MAAOmB,EAAKhB,YAZ5C,+BAiBQ,OAAKzB,KAAKP,MAAM6B,MAGZ,yBAAKvB,UAAU,OACX,wBAAIA,UAAU,UAAUC,KAAKP,MAAM6B,MAAMoB,OACzC,yBAAK3C,UAAU,SACX,yBAAKA,UAAU,eAAe4C,IAAK3C,KAAKP,MAAM6B,MAAMsB,UAExD,yBAAK7C,UAAU,UACX,yBAAKA,UAAU,cAEX,+CAAqBC,KAAKP,MAAM6B,MAAMuB,UACtC,wCAAc7C,KAAKP,MAAM6B,MAAMwB,QAC/B,sCAAY9C,KAAKP,MAAM6B,MAAMyB,SAZjC,SAlBpB,GAAiCb,IAAMC,WCC1Ba,G,YAAb,YACI,WAAY3D,GAAQ,IAAD,8BACf,4CAAMA,KAEDI,MAAQ,CACTwD,kBAAkB,GAJP,EADvB,sEAUQ,IAAMC,EAAIlD,KAAKX,MAAMiC,MACrB,OACI,yBAAKvB,UAAU,WAAWI,IAAK+C,EAAEC,QAC7B,yBAAKpD,UAAU,SACX,yBAAKA,UAAU,eAAe4C,IAAKO,EAAEN,UAEzC,yBAAK7C,UAAU,UACX,6BACI,kBAAC,IAAD,CAAMqD,GAAE,wBAAmBF,EAAEC,SAAWD,EAAER,QAE9C,uCAAaQ,EAAEG,OACf,+CAAqBH,EAAEL,UACvB,yBAAK9C,UAAU,OACVmD,EAAEI,QAAQpD,KAAI,SAAAqD,GAAC,OACZ,yBAAKxD,UAAU,QAAQI,IAAKoD,EAAEC,QAC1B,yBAAKzD,UAAU,yBACX,yBAAKA,UAAU,UAAUwD,EAAEC,QAC3B,yBAAKzD,UAAU,SAASwD,EAAEE,mBA3B9D,GAAkCvB,IAAMC,YCE3BuB,EAAb,YACI,WAAYrE,GAAQ,IAAD,8BACf,4CAAMA,KACDI,MAAQ,CAAEkE,OAAQ,IAFR,EADvB,iFAMyB,IAAD,OAEZC,EADY,uCAAuCC,MAAM,IAC/B3D,KAAI,SAAAgD,GAAC,OAAIzE,EAAeqF,aAAaZ,GAAG,IAAIa,MAAOC,kBACjFC,QAAQC,IAAIN,GACPrC,MAAK,SAAA4C,GACF,IAAMC,EAAS,GACTlE,EAAM,IAAImE,IAFD,uBAGf,YAAiBF,EAAUnC,QAAO,SAAAuB,GAAC,MAAuB,SAAnBA,EAAE9B,KAAKC,UAAwC,OAAjB6B,EAAE9B,KAAKmB,UAAiB1C,KAAI,SAAAqD,GAAC,OAAIA,EAAE9B,QAAxG,+CAA+G,CAAC,IAAvGA,EAAsG,QACtGvB,EAAIoE,IAAI7C,EAAK0B,UACdjD,EAAIqE,IAAI9C,EAAK0B,QAAQ,GACrBiB,EAAOrC,KAAKN,KANL,kFASf,EAAKT,SAAS,CAAE2C,OAAQS,SAnBxC,+BAyBQ,IAAII,EAASxE,KAAKP,MAAMkE,OAAOc,OAAS,EAAI,kBAAoB,GAChE,OACI,oCACI,4BAAKD,GACJxE,KAAKP,MAAMkE,OAAOzD,KAAI,SAAAgD,GAAC,OAAK,kBAAC,EAAD,CAAc5B,MAAO4B,EAAG/C,IAAK+C,EAAEC,iBA7B5E,GAAoCjB,IAAMC,W,QCA7BuC,G,MAAb,YACI,WAAYrF,GAAQ,IAAD,8BACf,4CAAMA,KAEDI,MAAQ,CACTkF,OAAQ,GACRC,UAAW,GACXC,eAAgB,GAChBC,cAAe,GACfC,cAAe,IAEnB,EAAK1C,kBAAoB,EAAKA,kBAAkB5B,KAAvB,gBACzB,EAAKuE,mBAAqB,EAAKA,mBAAmBvE,KAAxB,gBAC1B,EAAKwE,SAAW,EAAKA,SAASxE,KAAd,gBAChB,EAAKyE,YAAc,EAAKA,YAAYzE,KAAjB,gBAbJ,EADvB,iFAkBQT,KAAKiF,aAlBb,2CAqBQjF,KAAKiF,aArBb,iCAwBgB,IAAD,OACP,GAAIjF,KAAKmF,iBAAmBnF,KAAKX,MAAMkD,MAAMC,OAAOlB,MAApD,CAIAtB,KAAKmF,gBAAkBnF,KAAKX,MAAMkD,MAAMC,OAAOlB,MAC/C,IAAMsC,EAAgB5D,KAAKX,MAAMkD,MAAMC,OAAO4C,WAAWvB,MAAM,KAAK3D,KAAI,SAAAV,GAAC,OAAIf,EAAe4C,aAAa,EAAK8D,gBAAiB3F,MAC/HyE,QAAQC,IAAIN,GACPrC,MAAK,SAAA4C,GACF,IAAIkB,EAAWlB,EAAUnC,QAAO,SAAAuB,GAAC,MAAuB,SAAnBA,EAAE9B,KAAKC,YAAqBxB,KAAI,SAAAqD,GAAC,OAAIA,EAAE9B,KAAKrC,OAAOc,KAAI,SAAAoF,GAAC,OAAIA,EAAEnC,aAASoC,OACrF,GAAnBF,EAASZ,QACT,EAAKzD,SAAS,CAAE4D,UAAW,GAAIC,eAAgB,KAEnDZ,QAAQC,IAAImB,EAASnF,KAAI,SAAAlB,GAAE,OAAIP,EAAe6D,WAAWtD,OACpDuC,MAAK,SAAAiE,GACF,IAAM7B,EAAS6B,EAAStF,KAAI,SAAAqD,GAAC,OAAIA,EAAE9B,QAC7BkD,EAAM,YAAO,IAAIc,IAAI9B,EAAOzD,KAAI,SAAAgD,GAAC,OAAIA,EAAEG,MAAMQ,MAAM,QAAM0B,SAC/DZ,EAAOe,QAAQ,OACf,EAAK1E,SAAS,CAAE4D,UAAWjB,EAAQkB,eAAgBlB,EAAQgB,OAAQA,UAG9EhD,OAAM,SAAAZ,GACHa,QAAQC,IAAId,SA9C5B,oCAkDmB,IAAD,OACN4E,EAAkB3F,KAAKP,MAAMmF,UAAU5C,QAAO,SAAAkB,GAAC,MAAgC,OAA5B,EAAKzD,MAAMqF,eAA0B5B,EAAEG,MAAMuC,QAAQ,EAAKnG,MAAMqF,gBAAkB,KACzI,OAAQ9E,KAAKP,MAAMsF,eACf,KAAKA,EAAcc,aACfF,EAAkBA,EAAgBG,MAAK,SAACC,EAAGC,GAAJ,OAAU,IAAIjC,KAAKgC,EAAElD,UAAY,IAAIkB,KAAKiC,EAAEnD,WAAa,EAAI,KACpG,MAEJ,KAAKkC,EAAckB,WACfN,EAAkBA,EAAgBG,MAAK,SAACC,EAAGC,GAAO,IAAD,QACvCE,EAAM,oBAAGH,EAAEzC,QAAQtB,QAAO,SAAAuB,GAAC,MAAgB,2BAAZA,EAAEC,UAAqC,UAAhE,aAAG,EAAiEC,MAAMI,MAAM,KAAK,UAArF,QAA2F,IACjGsC,EAAM,oBAAGH,EAAE1C,QAAQtB,QAAO,SAAAuB,GAAC,MAAgB,2BAAZA,EAAEC,UAAqC,UAAhE,aAAG,EAAiEC,MAAMI,MAAM,KAAK,UAArF,QAA2F,IACvG,OAAOuC,WAAWF,GAAUE,WAAWD,GAAU,GAAK,KAE1D,MAEJ,KAAKpB,EAAcsB,MACfV,EAAkBA,EAAgBG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAErD,MAAQsD,EAAEtD,OAAU,EAAI,KAGnF1C,KAAKgB,SAAS,CAAE6D,eAAgBc,MArExC,+BAwEc,IAAD,OACL,OACI,oCACI,kDAAwB3F,KAAKX,MAAMkD,MAAMC,OAAOlB,MAAhD,KACA,0BAAMvB,UAAU,eACZ,2BAAOW,QAAQ,QAAQX,UAAU,QAAjC,SACA,4BAAQf,GAAG,QAAQe,UAAU,oBAAoBM,MAAOL,KAAKP,MAAMqF,cAAevE,SAAU,SAAAQ,GAAC,OAAI,EAAKC,SAAS,CAAE8D,cAAe/D,EAAEG,OAAOb,OAAS,EAAK6E,eAClJlF,KAAKP,MAAMkF,OAAOzE,KAAI,SAAAoG,GAAC,OAAK,4BAAQnG,IAAKmG,EAAGjG,MAAOiG,GAAIA,OAE5D,yBAAKvG,UAAU,cACX,2BAAOW,QAAQ,kBAAkBX,UAAU,QAA3C,mBACA,4BAAQf,GAAG,kBAAkBe,UAAU,qBAAqBM,MAAOL,KAAKP,MAAMsF,cAAexE,SAAU,SAAAQ,GAAC,OAAI,EAAKC,SAAS,CAAE+D,cAAehE,EAAEG,OAAOb,OAAS,EAAK6E,eAC9J,4BAAQ/E,IAAK4E,EAAcwB,QAAQpG,IAAKE,MAAO0E,EAAcwB,QAAQpG,KAAM4E,EAAcwB,SACzF,4BAAQpG,IAAK4E,EAAcc,aAAa1F,IAAKE,MAAO0E,EAAcc,aAAa1F,KAAM4E,EAAcc,cACnG,4BAAQ1F,IAAK4E,EAAckB,WAAW9F,IAAKE,MAAO0E,EAAckB,WAAW9F,KAAM4E,EAAckB,YAC/F,4BAAQ9F,IAAK4E,EAAcsB,MAAMlG,IAAKE,MAAO0E,EAAcsB,MAAMlG,KAAM4E,EAAcsB,UAIhGrG,KAAKP,MAAMoF,eAAe3E,KAAI,SAAAgD,GAAC,OAAK,kBAAC,EAAD,CAAc5B,MAAO4B,EAAG/C,IAAK+C,EAAEC,iBA3FpF,GAAkCjB,IAAMC,YAiGlC4C,EAAgB,CAClB,QAAW,UACX,aAAgB,gBAChB,WAAc,cACd,MAAS,S,QCtGAyB,G,MAAb,iLAEQ,OACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,wBAAI3G,UAAU,QAAd,aAJhB,GAAgCmC,IAAMC,YCMlCL,EAAU6E,EAAQ,GAAWC,uBAkBlBC,MAhBf,WACI,OACI,yBAAK9G,UAAU,uBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQ+B,QAASA,EAAS/B,UAAU,cACpC,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO+G,OAAK,EAACC,KAAK,IAAIC,UAAWtD,IACjC,kBAAC,IAAD,CAAOoD,OAAK,EAACC,KAAK,oCAAoCC,UAAWtC,IACjE,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,oBAAoBC,UAAW5E,QCVjD6E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS7E,MACvB,2DCZN8E,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpG,MAAK,SAAAqG,GACJA,EAAaC,gBAEdlG,OAAM,SAAAmG,GACLlG,QAAQkG,MAAMA,EAAMC,c","file":"static/js/main.a9fc2664.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const AppConfig = { \"server\": \"http://omdbapi.com\", \"apikey\": \"aa25ad59\" };","import { AppConfig } from '../config/config.js';\r\nimport axios from 'axios';\r\n\r\nclass OmdbApiService {\r\n    searchByType(searchString, movieType, year) {\r\n        let request = `${AppConfig.server}/?apikey=${AppConfig.apikey}&s=${searchString}&type=${movieType}&y=${year}&r=json&page=1`;\r\n        return axios.get(request);\r\n    }\r\n\r\n    searchById(id) {\r\n        let request = `${AppConfig.server}/?apikey=${AppConfig.apikey}&i=${id}&plot=full`;\r\n        return axios.get(request);\r\n    }\r\n\r\n    searchByName(movieName, y) {\r\n        let request = `${AppConfig.server}/?apikey=${AppConfig.apikey}&t=${movieName}&y=${y}`;\r\n        return axios.get(request);\r\n    }\r\n}\r\n\r\nconst omdbApiService = new OmdbApiService();\r\nexport default omdbApiService;","const movieTypes = [\"movie\", \"series\", \"episode\"]\r\n\r\nexport default movieTypes;","import React from 'react';\r\nimport omdbApiService from '../../services/OmdbApiService.js';\r\nimport movieTypes from '../../services/MovieTypes.js';\r\nimport './Search.css';\r\n\r\nexport class Search extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let types = {};\r\n        movieTypes.forEach(t => types[t] = true);\r\n        this.state = Object.assign(types, { resultList: [], movieName: \"\", toSearchResult: false, toMovieDetail: false });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row col-12 justify-content-center\">\r\n                {this.redirectToSearchResult()}\r\n                <form className=\"form-inline\">\r\n                    <div className=\"input-group\">\r\n                        {movieTypes.map(t => (\r\n                            <div className=\"form-check form-check-inline\" key={t}>\r\n                                <input className=\"form-check-input\" type=\"checkbox\" value={t} checked={this.state[t]} onChange={this.onMovieTypeCheckChanged.bind(this)} id={t} />\r\n                                <label className=\"form-check-label\" htmlFor={t}>{t}</label>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"input-group\">\r\n                        <input className=\"form-control\" placeholder=\"Movie name\" type=\"text\" onKeyPress={this.onKeyPress.bind(this)} value={this.state.movieName} onChange={this.handleChange.bind(this)} />\r\n                        <div className=\"input-group-append\">\r\n                            <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={e => this.setState({ toSearchResult: true })}>Search</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onMovieTypeCheckChanged(event) {\r\n        this.state[event.target.value] = event.target.checked;\r\n        this.setState(this.state);\r\n    }\r\n\r\n    handleChange(event) {\r\n        if (this.state.toSearchResult) {\r\n            this.setState({ toSearchResult: false });\r\n        }\r\n        this.setState({ movieName: event.target.value });\r\n    }\r\n\r\n    onSearchTextChanged(event, values) {\r\n        event.preventDefault();\r\n\r\n        omdbApiService.searchByType(event.target.value, movieTypes.movie)\r\n            .then(res => {\r\n                this.setState({ resultList: res.data.Response == \"False\" ? [] : res.data.Search });\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    onKeyPress(event) {\r\n        if (event.key == \"Enter\") {\r\n            this.setState({ toSearchResult: true });\r\n        }\r\n    }\r\n\r\n    redirectToSearchResult() {\r\n        if (this.state.toSearchResult) {\r\n            this.props.history.push(`/search-result/${this.state.movieName}&${movieTypes.filter(t => this.state[t]).join(',')}`);\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport omdbApiService from '../../services/OmdbApiService.js';\r\n\r\nexport class MovieDetail extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            movie: null\r\n        };\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        omdbApiService.searchById(this.props.match.params.id)\r\n            .then(resp => {\r\n                this.setState({ movie: resp.data });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.movie)\r\n            return (null);\r\n        return (\r\n            <div className=\"row\">\r\n                <h1 className=\"col-12\">{this.state.movie.Title}</h1>\r\n                <div className=\"col-2\">\r\n                    <img className=\"movie-poster\" src={this.state.movie.Poster} />\r\n                </div>\r\n                <div className=\"col-10\">\r\n                    <div className=\"float-left\">\r\n                        \r\n                        <div>Released date: {this.state.movie.Released}</div>\r\n                        <div>Actors: {this.state.movie.Actors}</div>\r\n                        <div>Plot: {this.state.movie.Plot}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            );\r\n    }\r\n}","import React from 'react';\r\nimport './MoviePreview.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class MoviePreview extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            redirectToDetail: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const m = this.props.movie;\r\n        return (\r\n            <div className=\"row mt-2\" key={m.imdbID}>\r\n                <div className=\"col-2\">\r\n                    <img className=\"movie-poster\" src={m.Poster} />\r\n                </div>\r\n                <div className=\"col-10\">\r\n                    <div>\r\n                        <Link to={`/movie-detail/${m.imdbID}`}>{m.Title}</Link>\r\n                    </div>\r\n                    <div>Genre: {m.Genre}</div>\r\n                    <div>Released date: {m.Released}</div>\r\n                    <div className=\"row\">\r\n                        {m.Ratings.map(r => (\r\n                            <div className=\"col-3\" key={r.Source}>\r\n                                <div className=\"rating d-inline-block\">\r\n                                    <div className=\"source\">{r.Source}</div>\r\n                                    <div className=\"value\">{r.Value}</div>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './UpcomingMovies.css';\r\nimport axios from 'axios';\r\nimport omdbApiService from '../../services/OmdbApiService.js';\r\nimport { MoviePreview } from '../MoviePreview/MoviePreview.js';\r\n\r\nexport class UpcomingMovies extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { movies: [] };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let alphabets = 'qwertyuiopasdfghjklzxcvbnm1234567890'.split('');\r\n        let moviePromises = alphabets.map(m => omdbApiService.searchByName(m, new Date().getFullYear()));\r\n        Promise.all(moviePromises)\r\n            .then(responses => {\r\n                const result = [];\r\n                const map = new Map();\r\n                for (let data of responses.filter(r => r.data.Response != 'False' && r.data.Poster != 'N/A').map(r => r.data)) {\r\n                    if (!map.has(data.imdbID)) {\r\n                        map.set(data.imdbID, true);\r\n                        result.push(data);\r\n                    }\r\n                }\r\n                this.setState({ movies: result });\r\n            });\r\n\r\n    }\r\n\r\n    render() {\r\n        let header = this.state.movies.length > 0 ? 'Upcoming movies' : '';\r\n        return (\r\n            <>\r\n                <h1>{header}</h1>\r\n                {this.state.movies.map(m => (<MoviePreview movie={m} key={m.imdbID} />))}\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport omdbApiService from '../../services/OmdbApiService.js';\r\nimport movieTypes from '../../services/MovieTypes.js';\r\nimport './SearchResult.css';\r\nimport { MoviePreview } from '../MoviePreview/MoviePreview.js';\r\n\r\nexport class SearchResult extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            genres: [],\r\n            allMovies: [],\r\n            filteredMovies: [],\r\n            selectedGenre: '',\r\n            orderMoviesBy: ''\r\n        };\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n        this.componentDidUpdate = this.componentDidUpdate.bind(this);\r\n        this.doSearch = this.doSearch.bind(this);\r\n        this.applyFilter = this.applyFilter.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.doSearch();\r\n    }\r\n    componentDidUpdate() {\r\n        this.doSearch();\r\n    }\r\n\r\n    doSearch() {\r\n        if (this.lastSearchValue == this.props.match.params.movie) {\r\n            return;\r\n        }\r\n\r\n        this.lastSearchValue = this.props.match.params.movie;\r\n        const moviePromises = this.props.match.params.movietypes.split(',').map(t => omdbApiService.searchByType(this.lastSearchValue, t));\r\n        Promise.all(moviePromises)\r\n            .then(responses => {\r\n                let movieIDs = responses.filter(r => r.data.Response != \"False\").map(r => r.data.Search.map(s => s.imdbID)).flat();\r\n                if (movieIDs.length == 0) {\r\n                    this.setState({ allMovies: [], filteredMovies: [] });\r\n                }\r\n                Promise.all(movieIDs.map(id => omdbApiService.searchById(id)))\r\n                    .then(response => {\r\n                        const movies = response.map(r => r.data);\r\n                        const genres = [...new Set(movies.map(m => m.Genre.split(',')).flat())];\r\n                        genres.unshift('All');\r\n                        this.setState({ allMovies: movies, filteredMovies: movies, genres: genres });\r\n                    });\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    applyFilter() {\r\n        let processedMovies = this.state.allMovies.filter(m => this.state.selectedGenre == 'All' || m.Genre.indexOf(this.state.selectedGenre) > -1);\r\n        switch (this.state.orderMoviesBy) {\r\n            case orderMoviesBy.releasedDate:\r\n                processedMovies = processedMovies.sort((a, b) => new Date(a.Released) < new Date(b.Released) ? -1 : 1);\r\n                break;\r\n\r\n            case orderMoviesBy.imdbRating:\r\n                processedMovies = processedMovies.sort((a, b) => {\r\n                    const aScore = a.Ratings.filter(r => r.Source == 'Internet Movie Database')[0]?.Value.split('/')[0] ?? \"0\";\r\n                    const bScore = b.Ratings.filter(r => r.Source == 'Internet Movie Database')[0]?.Value.split('/')[0] ?? \"0\";\r\n                    return parseFloat(aScore) < parseFloat(bScore) ? 1 : -1;\r\n                });\r\n                break;\r\n\r\n            case orderMoviesBy.title:\r\n                processedMovies = processedMovies.sort((a, b) => a.Title < b.Title ? - 1 : 1);\r\n                break;\r\n        }\r\n        this.setState({ filteredMovies: processedMovies });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h1>Search result for \"{this.props.match.params.movie}\"</h1>\r\n                <form className=\"form-inline\">\r\n                    <label htmlFor=\"genre\" className=\"mr-2\">Genre</label>\r\n                    <select id=\"genre\" className=\"form-control mr-2\" value={this.state.selectedGenre} onChange={e => this.setState({ selectedGenre: e.target.value }, this.applyFilter)}>\r\n                        {this.state.genres.map(g => (<option key={g} value={g}>{g}</option>))}\r\n                    </select>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"order-result-by\" className=\"mr-2\">Order result by</label>\r\n                        <select id=\"order-result-by\" className=\"form-control  mr-2\" value={this.state.orderMoviesBy} onChange={e => this.setState({ orderMoviesBy: e.target.value }, this.applyFilter)}>\r\n                            <option key={orderMoviesBy.default.key} value={orderMoviesBy.default.key}>{orderMoviesBy.default}</option>\r\n                            <option key={orderMoviesBy.releasedDate.key} value={orderMoviesBy.releasedDate.key}>{orderMoviesBy.releasedDate}</option>\r\n                            <option key={orderMoviesBy.imdbRating.key} value={orderMoviesBy.imdbRating.key}>{orderMoviesBy.imdbRating}</option>\r\n                            <option key={orderMoviesBy.title.key} value={orderMoviesBy.title.key}>{orderMoviesBy.title}</option>\r\n                        </select>\r\n                    </div>\r\n                </form>\r\n                {this.state.filteredMovies.map(m => (<MoviePreview movie={m} key={m.imdbID} />))}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst orderMoviesBy = {\r\n    \"default\": \"Default\",\r\n    \"releasedDate\": \"Released date\",\r\n    \"imdbRating\": \"IMDB rating\",\r\n    \"title\": \"Title\",\r\n};","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\n\r\nimport './KinoAppBar.css';\r\n\r\nexport class KinoAppBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <AppBar position=\"static\">\r\n                <h5 className=\"ml-2\">Kino</h5>\r\n            </AppBar>\r\n\r\n        );\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport { Switch, Route } from 'react-router';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\nimport { Search } from './components/Search/Search.js';\nimport { MovieDetail } from './components/MovieDetail/MovieDetail';\r\nimport { UpcomingMovies } from './components/UpcomingMovies/UpcomingMovies';\r\nimport { SearchResult } from './components/SearchResult/SearchResult';\r\nimport { KinoAppBar } from './components/KinoAppBar/KinoAppBar';\r\n\r\nlet history = require('history').createBrowserHistory();\r\n\nfunction App() {\n    return (\n        <div className=\"App container-fluid\">\n            <KinoAppBar />\n            <Search history={history} className=\"searchbar\" />\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\" component={UpcomingMovies} />\n                    <Route exact path=\"/search-result/:movie&:movietypes\" component={SearchResult} />\n                    <Route exact path=\"/movie-detail/:id\" component={MovieDetail} />\n                </Switch>\n            </Router >\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}