{"version":3,"sources":["logo.svg","config/config.js","services/OmdbApiService.js","services/MovieTypes.js","components/Search/Search.js","components/MovieDetail/MovieDetail.js","common/Constants.js","components/MoviePreview/MoviePreview.js","components/UpcomingMovies/UpcomingMovies.js","components/SearchResult/SearchResult.js","components/KinoAppBar/KinoAppBar.js","components/WatchList/WatchList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppConfig","omdbApiService","searchString","movieType","year","request","axios","get","id","movieName","type","movieTypes","Search","props","types","forEach","t","state","Object","assign","resultList","toSearchResult","toMovieDetail","className","this","redirectToSearchResult","map","key","value","checked","onChange","onMovieTypeCheckChanged","bind","htmlFor","placeholder","onKeyPress","handleChange","onClick","e","setState","event","target","values","preventDefault","searchByType","movie","then","res","data","Response","catch","console","log","to","filter","join","React","Component","MovieDetail","movieProperties","seriesProperties","componentDidMount","searchById","match","params","resp","m","detail","properties","Type","keys","k","indexOf","Title","alt","src","Poster","Constants","MoviePreview","cookies","Cookies","redirectToDetail","watchlist","toggleWatchListMovieStyle","imdbID","Genre","Released","Ratings","r","Source","Value","toggleWatchlistMovie","index","splice","push","set","UpcomingMovies","movies","moviePromises","split","searchByName","Date","getFullYear","Promise","all","responses","result","Map","filteredResponses","has","sort","a","b","header","length","SearchResult","genres","allMovies","filteredMovies","selectedGenre","orderMoviesBy","componentDidUpdate","doSearch","applyFilter","lastSearchValue","movietypes","movieIDs","s","flat","response","Set","unshift","processedMovies","releasedDate","imdbRating","parseFloat","title","g","default","KinoAppBar","AppBar","position","color","Toolbar","variant","Typography","WatchList","promises","require","createBrowserHistory","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b6df129a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const AppConfig = { \"server\": \"https://omdbapi.com\", \"apikey\": \"aa25ad59\" };","import { AppConfig } from '../config/config.js';\r\nimport axios from 'axios';\r\n\r\nclass OmdbApiService {\r\n    searchByType(searchString, movieType, year) {\r\n        let request = `${AppConfig.server}/?apikey=${AppConfig.apikey}&s=${searchString}&type=${movieType}&y=${year}&r=json&page=1`;\r\n        return axios.get(request);\r\n    }\r\n\r\n    searchById(id) {\r\n        let request = `${AppConfig.server}/?apikey=${AppConfig.apikey}&i=${id}&plot=full`;\r\n        return axios.get(request);\r\n    }\r\n\r\n    searchByName(movieName, year, type) {\r\n        let request = `${AppConfig.server}/?apikey=${AppConfig.apikey}&t=${movieName}&y=${year}&type=${type}`;\r\n        return axios.get(request);\r\n    }\r\n}\r\n\r\nconst omdbApiService = new OmdbApiService();\r\nexport default omdbApiService;","const movieTypes = [\"movie\", \"series\", \"episode\"]\r\n\r\nexport default movieTypes;","import React from 'react';\r\nimport omdbApiService from '../../services/OmdbApiService.js';\r\nimport movieTypes from '../../services/MovieTypes.js';\r\nimport './Search.css';\r\nimport { Redirect } from 'react-router';\r\n\r\nexport class Search extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let types = {};\r\n        movieTypes.forEach(t => types[t] = true);\r\n        this.state = Object.assign(types, { resultList: [], movieName: \"\", toSearchResult: false, toMovieDetail: false });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row col-12 justify-content-center\">\r\n                {this.redirectToSearchResult()}\r\n                <form className=\"form-inline\">\r\n                    <div className=\"input-group\">\r\n                        {movieTypes.map(t => (\r\n                            <div className=\"form-check form-check-inline\" key={t}>\r\n                                <input className=\"form-check-input\" type=\"checkbox\" value={t} checked={this.state[t]} onChange={this.onMovieTypeCheckChanged.bind(this)} id={t} />\r\n                                <label className=\"form-check-label\" htmlFor={t}>{t}</label>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"input-group\">\r\n                        <input className=\"form-control\" placeholder=\"Movie name\" type=\"text\" onKeyPress={this.onKeyPress.bind(this)} value={this.state.movieName} onChange={this.handleChange.bind(this)} />\r\n                        <div className=\"input-group-append\">\r\n                            <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={e => this.setState({ toSearchResult: true })}>Search</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onMovieTypeCheckChanged(event) {\r\n        this.state[event.target.value] = event.target.checked;\r\n        this.setState(this.state);\r\n    }\r\n\r\n    handleChange(event) {\r\n        if (this.state.toSearchResult) {\r\n            this.setState({ toSearchResult: false });\r\n        }\r\n        this.setState({ movieName: event.target.value });\r\n    }\r\n\r\n    onSearchTextChanged(event, values) {\r\n        event.preventDefault();\r\n\r\n        omdbApiService.searchByType(event.target.value, movieTypes.movie)\r\n            .then(res => {\r\n                this.setState({ resultList: res.data.Response === \"False\" ? [] : res.data.Search });\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    onKeyPress(event) {\r\n        if (event.key === \"Enter\") {\r\n            this.setState({ toSearchResult: true });\r\n        }\r\n    }\r\n\r\n    redirectToSearchResult() {\r\n        if (this.state.toSearchResult) {\r\n            return <Redirect to={`/search-result/${this.state.movieName}&${movieTypes.filter(t => this.state[t]).join(',')}`} />\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport omdbApiService from '../../services/OmdbApiService.js';\r\n\r\nexport class MovieDetail extends React.Component {\r\n    movieProperties = ['Year', 'Rated', 'Released', 'Runtime', 'Genre', 'Director', 'Writer', 'Actors', 'Plot', 'Language', 'Country', 'Awards', 'DVD', 'BoxOffice', 'Production', 'Website'];\r\n    seriesProperties = ['Year', 'Rated', 'Released', 'Runtime', 'Genre', 'Director', 'Writer', 'Actors', 'Plot', 'Language', 'Country', 'Awards', 'totalSeasons'];\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            movie: null\r\n        };\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        omdbApiService.searchById(this.props.match.params.id)\r\n            .then(resp => {\r\n                this.setState({ movie: resp.data });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const m = this.state.movie;\r\n        if (!m)\r\n            return (null);\r\n        let detail = <></>;\r\n        const properties = m.Type === 'movie' ? this.movieProperties : (m.Type === 'series' ? this.seriesProperties : null);\r\n        if (properties) {\r\n            detail = Object.keys(m).map(k => properties.indexOf(k) > -1 ? (<div><strong>{k}</strong>: {m[k]}</div>) : <></>);\r\n        }\r\n        return (\r\n            <div className=\"row\">\r\n                <h1 className=\"col-12\">{this.state.movie.Title}</h1>\r\n                <div className=\"col-2\">\r\n                    <img alt={this.state.movie.Title} className=\"movie-poster\" src={this.state.movie.Poster} />\r\n                </div>\r\n                <div className=\"col-10\">\r\n                    <div className=\"float-left\">\r\n                        {detail}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","export const Constants = {\r\n    cookieWatchlist: 'watch-list'\r\n};","import React from 'react';\r\nimport './MoviePreview.css';\r\nimport { Link } from 'react-router-dom';\r\nimport Cookies from 'universal-cookie';\r\nimport { Constants } from '../../common/Constants';\r\n\r\nexport class MoviePreview extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.cookies = new Cookies();\r\n        this.state = {\r\n            redirectToDetail: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const m = this.props.movie;\r\n        const watchlist = this.cookies.get(Constants.cookieWatchlist) ?? [];\r\n        const toggleWatchListMovieStyle = watchlist.indexOf(m.imdbID) > -1 ? 'btn btn-sm btn-danger mt-1' : 'btn btn-sm btn-primary mt-1';\r\n        return (\r\n            <div className=\"row mt-2\" key={m.imdbID}>\r\n                <div className=\"col-2\">\r\n                    <img alt={m.Title} className=\"movie-poster\" src={m.Poster} />\r\n                </div>\r\n                <div className=\"col-10\">\r\n                    <div>\r\n                        <Link to={`/movie-detail/${m.imdbID}`}>{m.Title}</Link>\r\n                    </div>\r\n                    <div>Genre: {m.Genre}</div>\r\n                    <div>Released date: {m.Released}</div>\r\n                    <div className=\"row\">\r\n                        {m.Ratings.map(r => (\r\n                            <div className=\"col-3\" key={r.Source}>\r\n                                <div className=\"rating d-inline-block\">\r\n                                    <div className=\"source\">{r.Source}</div>\r\n                                    <div className=\"value\">{r.Value}</div>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <button className={toggleWatchListMovieStyle} onClick={this.toggleWatchlistMovie.bind(this)}>{watchlist.indexOf(m.imdbID) > -1 ? 'Remove from watchlist' : 'Add to watchlist'}</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    toggleWatchlistMovie() {\r\n        let watchlist = this.cookies.get(Constants.cookieWatchlist);\r\n        if (!watchlist) {\r\n            watchlist = [];\r\n        }\r\n\r\n        const index = watchlist.indexOf(this.props.movie.imdbID);\r\n        if (index > -1) {\r\n            watchlist.splice(index, 1);\r\n        } else {\r\n            watchlist.push(this.props.movie.imdbID);\r\n        }\r\n        this.cookies.set(Constants.cookieWatchlist, watchlist);\r\n        this.setState(this.state);\r\n    }\r\n}","import React from 'react';\r\nimport './UpcomingMovies.css';\r\nimport omdbApiService from '../../services/OmdbApiService.js';\r\nimport { MoviePreview } from '../MoviePreview/MoviePreview.js';\r\n\r\nexport class UpcomingMovies extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { movies: [] };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let moviePromises = 'qwertyuiopasdfghjkl'.split('').map(m => omdbApiService.searchByName(m, new Date().getFullYear(), 'movie'));\r\n        Promise.all(moviePromises)\r\n            .then(responses => {\r\n                const result = [];\r\n                const map = new Map();\r\n                const filteredResponses = responses\r\n                    .filter(r => r.data.Response !== 'False' && r.data.Poster !== 'N/A').map(r => r.data);\r\n                for (let data of filteredResponses) {\r\n                    if (!map.has(data.imdbID)) {\r\n                        map.set(data.imdbID, true);\r\n                        result.push(data);\r\n                    }\r\n                }\r\n                const sortFunction = (a, b) => {\r\n                    const aReleased = new Date(a.Released === 'N/A' ? 8640000000000000 : a.Released);\r\n                    const bReleased = new Date(b.Released === 'N/A' ? 8640000000000000 : b.Released);\r\n                    return aReleased < bReleased ? -1 : 1;\r\n                };\r\n                this.setState({\r\n                    movies: result.sort(sortFunction)});\r\n            });\r\n\r\n    }\r\n\r\n    render() {\r\n        let header = this.state.movies.length > 0 ? `New movies in ${new Date().getFullYear()}` : '';\r\n        return (\r\n            <>\r\n                <h1>{header}</h1>\r\n                {this.state.movies.map(m => (<MoviePreview movie={m} key={m.imdbID} />))}\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport omdbApiService from '../../services/OmdbApiService.js';\r\nimport './SearchResult.css';\r\nimport { MoviePreview } from '../MoviePreview/MoviePreview.js';\r\n\r\nexport class SearchResult extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            genres: [],\r\n            allMovies: [],\r\n            filteredMovies: [],\r\n            selectedGenre: '',\r\n            orderMoviesBy: ''\r\n        };\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n        this.componentDidUpdate = this.componentDidUpdate.bind(this);\r\n        this.doSearch = this.doSearch.bind(this);\r\n        this.applyFilter = this.applyFilter.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.doSearch();\r\n    }\r\n    componentDidUpdate() {\r\n        this.doSearch();\r\n    }\r\n\r\n    doSearch() {\r\n        if (this.lastSearchValue === this.props.match.params.movie) {\r\n            return;\r\n        }\r\n\r\n        this.lastSearchValue = this.props.match.params.movie;\r\n        const moviePromises = this.props.match.params.movietypes.split(',').map(t => omdbApiService.searchByType(this.lastSearchValue, t));\r\n        Promise.all(moviePromises)\r\n            .then(responses => {\r\n                let movieIDs = responses.filter(r => r.data.Response !== \"False\").map(r => r.data.Search.map(s => s.imdbID)).flat();\r\n                if (movieIDs.length === 0) {\r\n                    this.setState({ allMovies: [], filteredMovies: [] });\r\n                }\r\n                Promise.all(movieIDs.map(id => omdbApiService.searchById(id)))\r\n                    .then(response => {\r\n                        const movies = response.map(r => r.data);\r\n                        const genres = [...new Set(movies.map(m => m.Genre.split(',')).flat())];\r\n                        genres.unshift('All');\r\n                        this.setState({ allMovies: movies, filteredMovies: movies, genres: genres });\r\n                    });\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    applyFilter() {\r\n        let processedMovies = this.state.allMovies.filter(m => this.state.selectedGenre === 'All' || m.Genre.indexOf(this.state.selectedGenre) > -1);\r\n        switch (this.state.orderMoviesBy) {\r\n            case orderMoviesBy.releasedDate:\r\n                processedMovies = processedMovies.sort((a, b) => new Date(a.Released) < new Date(b.Released) ? -1 : 1);\r\n                break;\r\n\r\n            case orderMoviesBy.imdbRating:\r\n                processedMovies = processedMovies.sort((a, b) => {\r\n                    return parseFloat(a.imdbRating) < parseFloat(b.imdbRating) ? 1 : -1;\r\n                });\r\n                break;\r\n\r\n            case orderMoviesBy.title:\r\n                processedMovies = processedMovies.sort((a, b) => a.Title < b.Title ? - 1 : 1);\r\n                break;\r\n        }\r\n        this.setState({ filteredMovies: processedMovies });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h1>Search result for \"{this.props.match.params.movie}\"</h1>\r\n                <form className=\"form-inline\">\r\n                    <label htmlFor=\"genre\" className=\"mr-2\">Genre</label>\r\n                    <select id=\"genre\" className=\"form-control mr-2\" value={this.state.selectedGenre} onChange={e => this.setState({ selectedGenre: e.target.value }, this.applyFilter)}>\r\n                        {this.state.genres.map(g => (<option key={g} value={g}>{g}</option>))}\r\n                    </select>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"order-result-by\" className=\"mr-2\">Order result by</label>\r\n                        <select id=\"order-result-by\" className=\"form-control  mr-2\" value={this.state.orderMoviesBy} onChange={e => this.setState({ orderMoviesBy: e.target.value }, this.applyFilter)}>\r\n                            <option key={orderMoviesBy.default.key} value={orderMoviesBy.default.key}>{orderMoviesBy.default}</option>\r\n                            <option key={orderMoviesBy.releasedDate.key} value={orderMoviesBy.releasedDate.key}>{orderMoviesBy.releasedDate}</option>\r\n                            <option key={orderMoviesBy.imdbRating.key} value={orderMoviesBy.imdbRating.key}>{orderMoviesBy.imdbRating}</option>\r\n                            <option key={orderMoviesBy.title.key} value={orderMoviesBy.title.key}>{orderMoviesBy.title}</option>\r\n                        </select>\r\n                    </div>\r\n                </form>\r\n                {this.state.filteredMovies.map(m => (<MoviePreview movie={m} key={m.imdbID} />))}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst orderMoviesBy = {\r\n    \"default\": \"Default\",\r\n    \"releasedDate\": \"Released date\",\r\n    \"imdbRating\": \"IMDB rating\",\r\n    \"title\": \"Title\",\r\n};","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport './KinoAppBar.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class KinoAppBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <AppBar position=\"static\" color=\"secondary\">\r\n                <Toolbar variant=\"dense\">\r\n                    <Typography variant=\"h6\">Kino</Typography>\r\n                    <Link to='/watch-list' className=\"watch-list btn btn-primary\">Watch list</Link>\r\n                </Toolbar>\r\n            </AppBar>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './WatchList.css';\r\nimport Cookies from 'universal-cookie';\r\nimport { Constants } from '../../common/Constants';\r\nimport { MoviePreview } from '../MoviePreview/MoviePreview';\r\nimport omdbApiService from '../../services/OmdbApiService.js';\r\n\r\nexport class WatchList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.cookies = new Cookies();\r\n        this.state = { watchlist: [] };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const promises = this.cookies.get(Constants.cookieWatchlist).map(id => omdbApiService.searchById(id));\r\n        Promise.all(promises)\r\n            .then(responses => {\r\n                this.setState({ watchlist: responses.map(r => r.data) });\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.watchlist.map(m => (<MoviePreview movie={m} key={m.imdbID} />))}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport { Switch, Route } from 'react-router';\nimport { HashRouter } from 'react-router-dom';\nimport './App.css';\nimport { Search } from './components/Search/Search.js';\nimport { MovieDetail } from './components/MovieDetail/MovieDetail';\r\nimport { UpcomingMovies } from './components/UpcomingMovies/UpcomingMovies';\r\nimport { SearchResult } from './components/SearchResult/SearchResult';\r\nimport { KinoAppBar } from './components/KinoAppBar/KinoAppBar';\r\nimport { WatchList } from './components/WatchList/WatchList';\r\n\r\nlet history = require('history').createBrowserHistory();\r\n\nfunction App() {\n    return (\n        <div className=\"App container-fluid\">\n            <HashRouter>\n                <KinoAppBar />\n                <Search className=\"searchbar\" />\n                <Switch>\n                    <Route exact path=\"/\" component={UpcomingMovies} />\n                    <Route exact path=\"/search-result/:movie&:movietypes\" component={SearchResult} />\n                    <Route exact path=\"/movie-detail/:id\" component={MovieDetail} />\n                    <Route exact path=\"/watch-list\" component={WatchList} />\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { CookiesProvider } from 'react-cookie';\n\nReactDOM.render(\n    (<CookiesProvider>\n        <App />\n    </CookiesProvider>\n    ), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}