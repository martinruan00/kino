{"version":3,"sources":["components/SearchResult/SearchResult.js","common/Constants.js","components/MoviePreview/MoviePreview.js"],"names":["SearchResult","props","state","genres","allMovies","filteredMovies","selectedGenre","orderMoviesBy","componentDidMount","bind","componentDidUpdate","doSearch","applyFilter","this","lastSearchValue","match","params","movie","moviePromises","movietypes","split","map","t","omdbApiService","searchByType","Promise","all","then","responses","movieIDs","filter","r","data","Response","Search","s","imdbID","flat","length","setState","id","searchById","response","movies","Set","m","Genre","unshift","catch","e","console","log","processedMovies","indexOf","releasedDate","sort","a","b","Date","Released","imdbRating","parseFloat","title","Title","className","htmlFor","value","onChange","target","g","key","default","React","Component","Constants","cookieWatchlist","MoviePreview","cookies","Cookies","redirectToDetail","watchlist","get","toggleWatchListMovieStyle","alt","src","Poster","to","Ratings","Source","Value","onClick","toggleWatchlistMovie","index","splice","push","set"],"mappings":"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","file":"static/js/3.705e8fd6.chunk.js","sourcesContent":["import React from 'react';\r\nimport omdbApiService from '../../services/OmdbApiService.js';\r\nimport './SearchResult.css';\r\nimport MoviePreview from '../MoviePreview/MoviePreview.js';\r\n\r\nexport default class SearchResult extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            genres: [],\r\n            allMovies: [],\r\n            filteredMovies: [],\r\n            selectedGenre: '',\r\n            orderMoviesBy: ''\r\n        };\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n        this.componentDidUpdate = this.componentDidUpdate.bind(this);\r\n        this.doSearch = this.doSearch.bind(this);\r\n        this.applyFilter = this.applyFilter.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.doSearch();\r\n    }\r\n    componentDidUpdate() {\r\n        this.doSearch();\r\n    }\r\n\r\n    doSearch() {\r\n        if (this.lastSearchValue === this.props.match.params.movie) {\r\n            return;\r\n        }\r\n\r\n        this.lastSearchValue = this.props.match.params.movie;\r\n        const moviePromises = this.props.match.params.movietypes.split(',').map(t => omdbApiService.searchByType(this.lastSearchValue, t));\r\n        Promise.all(moviePromises)\r\n            .then(responses => {\r\n                let movieIDs = responses.filter(r => r.data.Response !== \"False\").map(r => r.data.Search.map(s => s.imdbID)).flat();\r\n                if (movieIDs.length === 0) {\r\n                    this.setState({ allMovies: [], filteredMovies: [] });\r\n                }\r\n                Promise.all(movieIDs.map(id => omdbApiService.searchById(id)))\r\n                    .then(response => {\r\n                        const movies = response.map(r => r.data);\r\n                        const genres = [...new Set(movies.map(m => m.Genre.split(',')).flat())];\r\n                        genres.unshift('All');\r\n                        this.setState({ allMovies: movies, filteredMovies: movies, genres: genres });\r\n                    });\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    applyFilter() {\r\n        let processedMovies = this.state.allMovies.filter(m => this.state.selectedGenre === 'All' || m.Genre.indexOf(this.state.selectedGenre) > -1);\r\n        switch (this.state.orderMoviesBy) {\r\n            case orderMoviesBy.releasedDate:\r\n                processedMovies = processedMovies.sort((a, b) => new Date(a.Released) < new Date(b.Released) ? -1 : 1);\r\n                break;\r\n\r\n            case orderMoviesBy.imdbRating:\r\n                processedMovies = processedMovies.sort((a, b) => {\r\n                    return parseFloat(a.imdbRating) < parseFloat(b.imdbRating) ? 1 : -1;\r\n                });\r\n                break;\r\n\r\n            case orderMoviesBy.title:\r\n                processedMovies = processedMovies.sort((a, b) => a.Title < b.Title ? - 1 : 1);\r\n                break;\r\n        }\r\n        this.setState({ filteredMovies: processedMovies });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h1>Search result for \"{this.props.match.params.movie}\"</h1>\r\n                <form className=\"form-inline\">\r\n                    <label htmlFor=\"genre\" className=\"mr-2\">Genre</label>\r\n                    <select id=\"genre\" className=\"form-control mr-2\" value={this.state.selectedGenre} onChange={e => this.setState({ selectedGenre: e.target.value }, this.applyFilter)}>\r\n                        {this.state.genres.map(g => (<option key={g} value={g}>{g}</option>))}\r\n                    </select>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"order-result-by\" className=\"mr-2\">Order result by</label>\r\n                        <select id=\"order-result-by\" className=\"form-control  mr-2\" value={this.state.orderMoviesBy} onChange={e => this.setState({ orderMoviesBy: e.target.value }, this.applyFilter)}>\r\n                            <option key={orderMoviesBy.default.key} value={orderMoviesBy.default.key}>{orderMoviesBy.default}</option>\r\n                            <option key={orderMoviesBy.releasedDate.key} value={orderMoviesBy.releasedDate.key}>{orderMoviesBy.releasedDate}</option>\r\n                            <option key={orderMoviesBy.imdbRating.key} value={orderMoviesBy.imdbRating.key}>{orderMoviesBy.imdbRating}</option>\r\n                            <option key={orderMoviesBy.title.key} value={orderMoviesBy.title.key}>{orderMoviesBy.title}</option>\r\n                        </select>\r\n                    </div>\r\n                </form>\r\n                {this.state.filteredMovies.map(m => (<MoviePreview movie={m} key={m.imdbID} />))}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst orderMoviesBy = {\r\n    \"default\": \"Default\",\r\n    \"releasedDate\": \"Released date\",\r\n    \"imdbRating\": \"IMDB rating\",\r\n    \"title\": \"Title\",\r\n};","export const Constants = {\r\n    cookieWatchlist: 'watch-list'\r\n};","import React from 'react';\r\nimport './MoviePreview.css';\r\nimport { Link } from 'react-router-dom';\r\nimport Cookies from 'universal-cookie';\r\nimport { Constants } from '../../common/Constants';\r\n\r\nexport default class MoviePreview extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.cookies = new Cookies();\r\n        this.state = {\r\n            redirectToDetail: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const m = this.props.movie;\r\n        const watchlist = this.cookies.get(Constants.cookieWatchlist) ?? [];\r\n        const toggleWatchListMovieStyle = watchlist.indexOf(m.imdbID) > -1 ? 'btn btn-sm btn-danger mt-1' : 'btn btn-sm btn-primary mt-1';\r\n        return (\r\n            <div className=\"row mt-2\" key={m.imdbID}>\r\n                <div className=\"col-2\">\r\n                    <img alt={m.Title} className=\"img-fluid\" src={m.Poster} />\r\n                </div>\r\n                <div className=\"col-10\">\r\n                    <div>\r\n                        <Link to={`/movie-detail/${m.imdbID}`}>{m.Title}</Link>\r\n                    </div>\r\n                    <div>Genre: {m.Genre}</div>\r\n                    <div>Released date: {m.Released}</div>\r\n                    <div className=\"row\">\r\n                        {m.Ratings.map(r => (\r\n                            <div className=\"col-3\" key={r.Source}>\r\n                                <div className=\"rating d-inline-block\">\r\n                                    <div className=\"source\">{r.Source}</div>\r\n                                    <div className=\"value\">{r.Value}</div>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <button className={toggleWatchListMovieStyle} onClick={this.toggleWatchlistMovie.bind(this)}>{watchlist.indexOf(m.imdbID) > -1 ? 'Remove from watchlist' : 'Add to watchlist'}</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    toggleWatchlistMovie() {\r\n        let watchlist = this.cookies.get(Constants.cookieWatchlist);\r\n        if (!watchlist) {\r\n            watchlist = [];\r\n        }\r\n\r\n        const index = watchlist.indexOf(this.props.movie.imdbID);\r\n        if (index > -1) {\r\n            watchlist.splice(index, 1);\r\n        } else {\r\n            watchlist.push(this.props.movie.imdbID);\r\n        }\r\n        this.cookies.set(Constants.cookieWatchlist, watchlist);\r\n        this.setState(this.state);\r\n    }\r\n}"],"sourceRoot":""}