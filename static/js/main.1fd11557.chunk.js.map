{"version":3,"sources":["config/config.js","services/OmdbApiService.js","services/MovieTypes.js","components/Search/Search.js","components/KinoAppBar/KinoAppBar.js","App.js","serviceWorker.js","index.js"],"names":["AppConfig","omdbApiService","searchString","movieType","year","request","axios","get","id","movieName","type","movieTypes","Search","props","types","forEach","t","state","Object","assign","resultList","toSearchResult","toMovieDetail","className","this","redirectToSearchResult","map","key","value","checked","onChange","onMovieTypeCheckChanged","bind","htmlFor","placeholder","onKeyPress","handleChange","onClick","e","setState","event","target","values","preventDefault","searchByType","movie","then","res","data","Response","catch","console","log","to","filter","join","React","Component","KinoAppBar","AppBar","position","color","Toolbar","variant","Typography","UpcomingMovies","lazy","MovieDetail","SearchResult","WatchList","App","fallback","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1fd11557.chunk.js","sourcesContent":["export const AppConfig = { \"server\": \"https://omdbapi.com\", \"apikey\": \"aa25ad59\" };","import { AppConfig } from '../config/config.js';\r\nimport axios from 'axios';\r\n\r\nclass OmdbApiService {\r\n    searchByType(searchString, movieType, year) {\r\n        let request = `${AppConfig.server}/?apikey=${AppConfig.apikey}&s=${searchString}&type=${movieType}&y=${year}&r=json&page=1`;\r\n        return axios.get(request);\r\n    }\r\n\r\n    searchById(id) {\r\n        let request = `${AppConfig.server}/?apikey=${AppConfig.apikey}&i=${id}&plot=full`;\r\n        return axios.get(request);\r\n    }\r\n\r\n    searchByName(movieName, year, type) {\r\n        let request = `${AppConfig.server}/?apikey=${AppConfig.apikey}&t=${movieName}&y=${year}&type=${type}`;\r\n        return axios.get(request);\r\n    }\r\n}\r\n\r\nconst omdbApiService = new OmdbApiService();\r\nexport default omdbApiService;","const movieTypes = [\"movie\", \"series\", \"episode\"]\r\n\r\nexport default movieTypes;","import React from 'react';\r\nimport omdbApiService from '../../services/OmdbApiService.js';\r\nimport movieTypes from '../../services/MovieTypes.js';\r\nimport './Search.css';\r\nimport { Redirect } from 'react-router';\r\n\r\nexport class Search extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let types = {};\r\n        movieTypes.forEach(t => types[t] = true);\r\n        this.state = Object.assign(types, { resultList: [], movieName: \"\", toSearchResult: false, toMovieDetail: false });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row col-12 justify-content-center\">\r\n                {this.redirectToSearchResult()}\r\n                <form className=\"form-inline\">\r\n                    <div className=\"input-group\">\r\n                        {movieTypes.map(t => (\r\n                            <div className=\"form-check form-check-inline\" key={t}>\r\n                                <input className=\"form-check-input\" type=\"checkbox\" value={t} checked={this.state[t]} onChange={this.onMovieTypeCheckChanged.bind(this)} id={t} />\r\n                                <label className=\"form-check-label\" htmlFor={t}>{t}</label>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"input-group\">\r\n                        <input className=\"form-control\" placeholder=\"Movie name\" type=\"text\" onKeyPress={this.onKeyPress.bind(this)} value={this.state.movieName} onChange={this.handleChange.bind(this)} />\r\n                        <div className=\"input-group-append\">\r\n                            <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={e => this.setState({ toSearchResult: true })}>Search</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onMovieTypeCheckChanged(event) {\r\n        this.state[event.target.value] = event.target.checked;\r\n        this.setState(this.state);\r\n    }\r\n\r\n    handleChange(event) {\r\n        if (this.state.toSearchResult) {\r\n            this.setState({ toSearchResult: false });\r\n        }\r\n        this.setState({ movieName: event.target.value });\r\n    }\r\n\r\n    onSearchTextChanged(event, values) {\r\n        event.preventDefault();\r\n\r\n        omdbApiService.searchByType(event.target.value, movieTypes.movie)\r\n            .then(res => {\r\n                this.setState({ resultList: res.data.Response === \"False\" ? [] : res.data.Search });\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    onKeyPress(event) {\r\n        if (event.key === \"Enter\") {\r\n            this.setState({ toSearchResult: true });\r\n        }\r\n    }\r\n\r\n    redirectToSearchResult() {\r\n        if (this.state.toSearchResult) {\r\n            return <Redirect to={`/search-result/${this.state.movieName}&${movieTypes.filter(t => this.state[t]).join(',')}`} />\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport './KinoAppBar.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class KinoAppBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <AppBar position=\"static\" color=\"secondary\">\r\n                <Toolbar variant=\"dense\">\r\n                    <Typography variant=\"h6\">Kino</Typography>\r\n                    <Link to='/watch-list' className=\"watch-list btn btn-primary\">Watch list</Link>\r\n                </Toolbar>\r\n            </AppBar>\r\n        );\r\n    }\r\n}","import React, { Suspense } from 'react';\nimport { Switch, Route } from 'react-router';\nimport { HashRouter } from 'react-router-dom';\nimport './App.css';\nimport { Search } from './components/Search/Search.js';\nimport { KinoAppBar } from './components/KinoAppBar/KinoAppBar';\r\n\r\nconst UpcomingMovies = React.lazy(() => import('./components/UpcomingMovies/UpcomingMovies'));\r\nconst MovieDetail = React.lazy(() => import('./components/MovieDetail/MovieDetail'));\r\nconst SearchResult = React.lazy(() => import('./components/SearchResult/SearchResult'));\r\nconst WatchList = React.lazy(() => import('./components/WatchList/WatchList'));\n\nfunction App() {\n    return (\n        <div className=\"App container-fluid\">\n            <HashRouter>\n                <KinoAppBar />\n                <Search className=\"searchbar\" />\n                <Suspense fallback={<div>Loading...</div>}>\n                    <Switch>\n                        <Route exact path=\"/\" component={UpcomingMovies} />\n                        <Route exact path=\"/search-result/:movie&:movietypes\" component={SearchResult} />\n                        <Route exact path=\"/movie-detail/:id\" component={MovieDetail} />\n                        <Route exact path=\"/watch-list\" component={WatchList} />\n                    </Switch>\n                </Suspense>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { CookiesProvider } from 'react-cookie';\n\nReactDOM.render(\n    (<CookiesProvider>\n        <App />\n    </CookiesProvider>), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}